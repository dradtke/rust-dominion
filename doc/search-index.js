var searchIndex = {};
searchIndex['dominion'] = {"items":[[0,"","dominion","This module provides an API for writing Dominion AI's in Rust. AI's are created by\ndefining a new empty struct and implementing the `Player` trait, like so:"],[2,"ActionInput","","Input parameters for card plays."],[12,"Discard","","Discard a card.",0],[12,"Trash","","Trash a card.",0],[12,"Gain","","Gain a card.",0],[12,"Confirm","","Confirm an effect, i.e. discarding your deck with Chancellor.",0],[12,"Repeat","","Repeat an effect, i.e. with Throne Room.",0],[2,"Error","","A custom error type for reporting strategic errors."],[12,"NoActions","","",1],[12,"NoBuys","","",1],[12,"InvalidPlay","","",1],[12,"NotInSupply","","",1],[12,"EmptyPile","","",1],[12,"NotInHand","","",1],[12,"NotEnoughMoney","","",1],[11,"need","dominion::Error","",1],[11,"have","","",1],[3,"buy","dominion","Buy a card from the supply, returning one of three possible\nerrors:"],[3,"count","","Returns either the number available for a given card, or None\nif the card wasn't available in this game."],[3,"get_action_count","","Get the number of actions left for the current player."],[3,"get_available_money","","Get a count of the total available money currently in the player's hand."],[3,"get_buying_power","","Get the current available buying power."],[3,"get_discard","","Get a copy of the player's discard pile."],[3,"get_hand","","Get a copy of the player's hand."],[3,"get_hand_size","","Get the number of cards in the player's hand."],[3,"get_total_points","","Get the total point value from all victory\nand curse cards in the player's deck, hand, and discard."],[3,"get_trash","","Get a clone of the game's trash pile."],[3,"hand_contains","","Returns true if and only if the player's hand contains\nthe specified card."],[3,"has","","Returns true if and only if the player has the provided card in their\nhand, deck, discard, or in play."],[3,"number_of","","Returns the number of instances of the provided card\nthat the player has in their hand, deck, discard, or in play."],[3,"play","","The entry point for playing a game, usually used via the shorthand `play!` macro."],[3,"play_all_money","","Plays all Money cards in the player's hand."],[3,"play_card","","Play a card with no input parameters. See `play_card_and()`."],[3,"play_card_and","","Play a card."],[3,"set_kingdom","","Sets the kingdom to be used."],[0,"cards","","Universal card definitions."],[3,"for_name","dominion::cards","This is a hack needed until Rust can properly hash function pointers."],[0,"dominion","","Dominion card definitions."],[3,"set","dominion::cards::dominion",""],[5,"CELLAR","",""],[5,"CHAPEL","",""],[5,"MOAT","",""],[5,"CHANCELLOR","",""],[5,"VILLAGE","",""],[5,"WOODCUTTER","",""],[5,"WORKSHOP","",""],[5,"BUREAUCRAT","",""],[5,"FEAST","",""],[5,"GARDENS","",""],[5,"MILITIA","",""],[5,"MONEYLENDER","",""],[5,"REMODEL","",""],[5,"SMITHY","",""],[5,"SPY","",""],[5,"THIEF","",""],[5,"THRONE_ROOM","",""],[5,"COUNCIL_ROOM","",""],[5,"FESTIVAL","",""],[5,"LABORATORY","",""],[5,"LIBRARY","",""],[5,"MARKET","",""],[5,"MINE","",""],[5,"WITCH","",""],[5,"ADVENTURER","",""],[5,"COPPER","dominion::cards",""],[5,"SILVER","",""],[5,"GOLD","",""],[5,"ESTATE","",""],[5,"DUCHY","",""],[5,"PROVINCE","",""],[5,"CURSE","",""],[0,"strat","dominion","Strategy examples."],[3,"big_money","dominion::strat","Big Money."],[3,"big_money_smithy","","Big Money Smithy."],[3,"big_money_witch","","Big Money Witch."],[4,"Card","dominion","A static pointer to a card definition."],[4,"Result","","An alias for `std::result::Result<(), dominion::Error>`."],[6,"Player","","A player definition."],[9,"name","","Gets the name of this player, which must be unique.",2],[9,"init","","Called before the first turn is played. `kingdom` is a slice of\nthe 10 cards that will be used this game, and it should return\na pointer to the function that will be called once per turn.",2],[10,"library_should_discard","","Called when an Action card is encountered as part of a Library draw.\nIt should return true if that card should be discarded, false if it\nshould be kept.",2],[10,"militia_discard","","Called when another player plays Militia, and is called repeatedly until\nyou have three or fewer cards in hand. The value returned should be\none of the cards in your hand. Returning a card not in your hand results\nin a task failure.",2],[10,"moat_should_block","","Called when another player plays an attack card while you have a Moat in\nhand. It should return true if you wish to block the attack, otherwise false.",2],[10,"spy_should_discard","","Called when a Spy is played, including by you.\nGiven the value of the top card of a player's deck, this method should\nreturn true if that card should be discarded, and false if it should\nbe returned to the top of the player's deck. The value of `is_self` is\ntrue if and only if you are the player being acted on.",2],[10,"bureaucrat_use_victory","","Called when another player plays Bureaucrat, and you have one or more\nVictory cards in your hand. `victory_cards` is a slice of all the\nVictory cards in your hand (and will always contain at least one),\nand the value returned will be placed back on top of your deck.\nReturning a value not in the slice results in a task failure.",2],[10,"thief_trash_and_keep","","Called when you play Thief and someone reveals one or more treasure cards.\n`options` contains at least one card (but no more than 2), and it should\nreturn a tuple describing how to treat the reveal. The first value is the\ncard that should be trashed, and the second value is a boolean indicating\nwhether or not it should be kept.",2],[10,"fmt","","",1],[15,"dominion!","","Play Dominion."],[15,"kingdom!","","Set a Kingdom to play with."],[15,"player!","","Shortcut for defining a new Player."]],"paths":[[2,"ActionInput"],[2,"Error"],[6,"Player"]]};
initSearch(searchIndex);
